#define INFINITY (__int_as_float(0x7f800000))
#define NAN (__int_as_float(0x7fffffff))
#include <cuda_fp16.h>
struct __align__(8) half4 { half x, y, z, w; }; __device__ half4 make_half4(half x, half y, half z, half w) { half4 r={x, y, z, w}; return r; }
struct __align__(16) half8 { half x, y, z, w, a, b, c, d; }; __device__ half8 make_half8(half x, half y, half z, half w, half a, half b, half c, half d) { half8 r={x, y, z, w, a, b, c, d}; return r; }
__device__ float4 __WMMA_8_16_16_half_float(half8 a, half4 b, float4 c){
  int *a_pk = (int *)(&a), *b_pk = (int *)(&b), *c_pk = (int *)(&c);
  asm("mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32"
      "{%0, %1, %2, %3}, {%4, %5, %6, %7},"
      "{%8, %9}, {%0, %1, %2, %3};"
    : "+r"(c_pk[0]), "+r"(c_pk[1]), "+r"(c_pk[2]), "+r"(c_pk[3])
    : "r"(a_pk[0]), "r"(a_pk[1]), "r"(a_pk[2]), "r"(a_pk[3]), "r"(b_pk[0]), "r"(b_pk[1]));
  return c;
}
extern "C" __global__ void __launch_bounds__(64) r_2_2_2_2_2_2_4_2_2_2_2_2_2_4_4(half* data0, half* data1, half* data2) {
  int lidx0 = threadIdx.x; /* 16 */
  int lidx1 = threadIdx.y; /* 2 */
  int lidx2 = threadIdx.z; /* 2 */
  int alu0 = (lidx0>>3);
  int alu1 = ((lidx0>>2)&1);
  int alu2 = (lidx0&1);
  int alu3 = ((lidx0>>1)&1);
  int alu4 = (lidx2<<5);
  int alu5 = ((lidx1<<8)+(alu0<<7)+(alu1<<6)+(alu2<<1)+(alu3<<2));
  float acc0 = 0.0f;
  float acc1 = 0.0f;
  float acc2 = 0.0f;
  float acc3 = 0.0f;
  float acc4 = 0.0f;
  float acc5 = 0.0f;
  float acc6 = 0.0f;
  float acc7 = 0.0f;
  float acc8 = 0.0f;
  float acc9 = 0.0f;
  float acc10 = 0.0f;
  float acc11 = 0.0f;
  float acc12 = 0.0f;
  float acc13 = 0.0f;
  float acc14 = 0.0f;
  float acc15 = 0.0f;
  float acc16 = 0.0f;
  float acc17 = 0.0f;
  float acc18 = 0.0f;
  float acc19 = 0.0f;
  float acc20 = 0.0f;
  float acc21 = 0.0f;
  float acc22 = 0.0f;
  float acc23 = 0.0f;
  float acc24 = 0.0f;
  float acc25 = 0.0f;
  float acc26 = 0.0f;
  float acc27 = 0.0f;
  float acc28 = 0.0f;
  float acc29 = 0.0f;
  float acc30 = 0.0f;
  float acc31 = 0.0f;
  float acc32 = 0.0f;
  float acc33 = 0.0f;
  float acc34 = 0.0f;
  float acc35 = 0.0f;
  float acc36 = 0.0f;
  float acc37 = 0.0f;
  float acc38 = 0.0f;
  float acc39 = 0.0f;
  float acc40 = 0.0f;
  float acc41 = 0.0f;
  float acc42 = 0.0f;
  float acc43 = 0.0f;
  float acc44 = 0.0f;
  float acc45 = 0.0f;
  float acc46 = 0.0f;
  float acc47 = 0.0f;
  float acc48 = 0.0f;
  float acc49 = 0.0f;
  float acc50 = 0.0f;
  float acc51 = 0.0f;
  float acc52 = 0.0f;
  float acc53 = 0.0f;
  float acc54 = 0.0f;
  float acc55 = 0.0f;
  float acc56 = 0.0f;
  float acc57 = 0.0f;
  float acc58 = 0.0f;
  float acc59 = 0.0f;
  float acc60 = 0.0f;
  float acc61 = 0.0f;
  float acc62 = 0.0f;
  float acc63 = 0.0f;
  for (int ridx0 = 0; ridx0 < 4; ridx0++) {
    int alu6 = ((ridx0<<4)+alu5);
    half2 val0 = *((half2*)((data1+alu6)));
    int alu7 = ((ridx0<<10)+alu4+(lidx1<<2)+(alu0<<1)+(alu2<<7)+(alu3<<8)+alu1);
    half val1 = *(data2+alu7);
    half2 val2 = *((half2*)((data1+(alu6+8))));
    half2 val3 = *((half2*)((data1+(alu6+512))));
    half2 val4 = *((half2*)((data1+(alu6+520))));
    half2 val5 = *((half2*)((data1+(alu6+1024))));
    half2 val6 = *((half2*)((data1+(alu6+1032))));
    half2 val7 = *((half2*)((data1+(alu6+1536))));
    half2 val8 = *((half2*)((data1+(alu6+1544))));
    half2 val9 = *((half2*)((data1+(alu6+2048))));
    half2 val10 = *((half2*)((data1+(alu6+2056))));
    half2 val11 = *((half2*)((data1+(alu6+2560))));
    half2 val12 = *((half2*)((data1+(alu6+2568))));
    half2 val13 = *((half2*)((data1+(alu6+3072))));
    half2 val14 = *((half2*)((data1+(alu6+3080))));
    half2 val15 = *((half2*)((data1+(alu6+3584))));
    half2 val16 = *((half2*)((data1+(alu6+3592))));
    half val17 = *(data2+(alu7+8));
    half val18 = *(data2+(alu7+16));
    half val19 = *(data2+(alu7+24));
    half val20 = *(data2+(alu7+64));
    half val21 = *(data2+(alu7+72));
    half val22 = *(data2+(alu7+80));
    half val23 = *(data2+(alu7+88));
    half val24 = *(data2+(alu7+512));
    half val25 = *(data2+(alu7+520));
    half val26 = *(data2+(alu7+528));
    half val27 = *(data2+(alu7+536));
    half val28 = *(data2+(alu7+576));
    half val29 = *(data2+(alu7+584));
    half val30 = *(data2+(alu7+592));
    half val31 = *(data2+(alu7+600));
    half4 cast0 = make_half4(val1,val20,val24,val28);
    half4 cast1 = make_half4(val17,val21,val25,val29);
    half4 cast2 = make_half4(val18,val22,val26,val30);
    half4 cast3 = make_half4(val19,val23,val27,val31);
    half8 cast4 = make_half8(val0.x,val0.y,val3.x,val3.y,val2.x,val2.y,val4.x,val4.y);
    half8 cast5 = make_half8(val5.x,val5.y,val7.x,val7.y,val6.x,val6.y,val8.x,val8.y);
    half8 cast6 = make_half8(val9.x,val9.y,val11.x,val11.y,val10.x,val10.y,val12.x,val12.y);
    half8 cast7 = make_half8(val13.x,val13.y,val15.x,val15.y,val14.x,val14.y,val16.x,val16.y);
    float4 wmma0 = __WMMA_8_16_16_half_float(cast4, cast0, make_float4(acc0,acc1,acc2,acc3));
    float4 wmma1 = __WMMA_8_16_16_half_float(cast4, cast1, make_float4(acc4,acc5,acc6,acc7));
    float4 wmma2 = __WMMA_8_16_16_half_float(cast4, cast2, make_float4(acc8,acc9,acc10,acc11));
    float4 wmma3 = __WMMA_8_16_16_half_float(cast4, cast3, make_float4(acc12,acc13,acc14,acc15));
    float4 wmma4 = __WMMA_8_16_16_half_float(cast5, cast0, make_float4(acc16,acc17,acc18,acc19));
    float4 wmma5 = __WMMA_8_16_16_half_float(cast5, cast1, make_float4(acc20,acc21,acc22,acc23));
    float4 wmma6 = __WMMA_8_16_16_half_float(cast5, cast2, make_float4(acc24,acc25,acc26,acc27));
    float4 wmma7 = __WMMA_8_16_16_half_float(cast5, cast3, make_float4(acc28,acc29,acc30,acc31));
    float4 wmma8 = __WMMA_8_16_16_half_float(cast6, cast0, make_float4(acc32,acc33,acc34,acc35));
    float4 wmma9 = __WMMA_8_16_16_half_float(cast6, cast1, make_float4(acc36,acc37,acc38,acc39));
    float4 wmma10 = __WMMA_8_16_16_half_float(cast6, cast2, make_float4(acc40,acc41,acc42,acc43));
    float4 wmma11 = __WMMA_8_16_16_half_float(cast6, cast3, make_float4(acc44,acc45,acc46,acc47));
    float4 wmma12 = __WMMA_8_16_16_half_float(cast7, cast0, make_float4(acc48,acc49,acc50,acc51));
    float4 wmma13 = __WMMA_8_16_16_half_float(cast7, cast1, make_float4(acc52,acc53,acc54,acc55));
    float4 wmma14 = __WMMA_8_16_16_half_float(cast7, cast2, make_float4(acc56,acc57,acc58,acc59));
    float4 wmma15 = __WMMA_8_16_16_half_float(cast7, cast3, make_float4(acc60,acc61,acc62,acc63));
    acc0 = wmma0.x;
    acc1 = wmma0.y;
    acc2 = wmma0.z;
    acc3 = wmma0.w;
    acc4 = wmma1.x;
    acc5 = wmma1.y;
    acc6 = wmma1.z;
    acc7 = wmma1.w;
    acc8 = wmma2.x;
    acc9 = wmma2.y;
    acc10 = wmma2.z;
    acc11 = wmma2.w;
    acc12 = wmma3.x;
    acc13 = wmma3.y;
    acc14 = wmma3.z;
    acc15 = wmma3.w;
    acc16 = wmma4.x;
    acc17 = wmma4.y;
    acc18 = wmma4.z;
    acc19 = wmma4.w;
    acc20 = wmma5.x;
    acc21 = wmma5.y;
    acc22 = wmma5.z;
    acc23 = wmma5.w;
    acc24 = wmma6.x;
    acc25 = wmma6.y;
    acc26 = wmma6.z;
    acc27 = wmma6.w;
    acc28 = wmma7.x;
    acc29 = wmma7.y;
    acc30 = wmma7.z;
    acc31 = wmma7.w;
    acc32 = wmma8.x;
    acc33 = wmma8.y;
    acc34 = wmma8.z;
    acc35 = wmma8.w;
    acc36 = wmma9.x;
    acc37 = wmma9.y;
    acc38 = wmma9.z;
    acc39 = wmma9.w;
    acc40 = wmma10.x;
    acc41 = wmma10.y;
    acc42 = wmma10.z;
    acc43 = wmma10.w;
    acc44 = wmma11.x;
    acc45 = wmma11.y;
    acc46 = wmma11.z;
    acc47 = wmma11.w;
    acc48 = wmma12.x;
    acc49 = wmma12.y;
    acc50 = wmma12.z;
    acc51 = wmma12.w;
    acc52 = wmma13.x;
    acc53 = wmma13.y;
    acc54 = wmma13.z;
    acc55 = wmma13.w;
    acc56 = wmma14.x;
    acc57 = wmma14.y;
    acc58 = wmma14.z;
    acc59 = wmma14.w;
    acc60 = wmma15.x;
    acc61 = wmma15.y;
    acc62 = wmma15.z;
    acc63 = wmma15.w;
  }
  int alu73 = (alu4+alu5);
  *((half2*)((data0+alu73))) = make_half2(((half)(acc0)),((half)(acc1)));
  *((half2*)((data0+(alu73+8)))) = make_half2(((half)(acc4)),((half)(acc5)));
  *((half2*)((data0+(alu73+16)))) = make_half2(((half)(acc8)),((half)(acc9)));
  *((half2*)((data0+(alu73+24)))) = make_half2(((half)(acc12)),((half)(acc13)));
  *((half2*)((data0+(alu73+512)))) = make_half2(((half)(acc2)),((half)(acc3)));
  *((half2*)((data0+(alu73+520)))) = make_half2(((half)(acc6)),((half)(acc7)));
  *((half2*)((data0+(alu73+528)))) = make_half2(((half)(acc10)),((half)(acc11)));
  *((half2*)((data0+(alu73+536)))) = make_half2(((half)(acc14)),((half)(acc15)));
  *((half2*)((data0+(alu73+1024)))) = make_half2(((half)(acc16)),((half)(acc17)));
  *((half2*)((data0+(alu73+1032)))) = make_half2(((half)(acc20)),((half)(acc21)));
  *((half2*)((data0+(alu73+1040)))) = make_half2(((half)(acc24)),((half)(acc25)));
  *((half2*)((data0+(alu73+1048)))) = make_half2(((half)(acc28)),((half)(acc29)));
  *((half2*)((data0+(alu73+1536)))) = make_half2(((half)(acc18)),((half)(acc19)));
  *((half2*)((data0+(alu73+1544)))) = make_half2(((half)(acc22)),((half)(acc23)));
  *((half2*)((data0+(alu73+1552)))) = make_half2(((half)(acc26)),((half)(acc27)));
  *((half2*)((data0+(alu73+1560)))) = make_half2(((half)(acc30)),((half)(acc31)));
  *((half2*)((data0+(alu73+2048)))) = make_half2(((half)(acc32)),((half)(acc33)));
  *((half2*)((data0+(alu73+2056)))) = make_half2(((half)(acc36)),((half)(acc37)));
  *((half2*)((data0+(alu73+2064)))) = make_half2(((half)(acc40)),((half)(acc41)));
  *((half2*)((data0+(alu73+2072)))) = make_half2(((half)(acc44)),((half)(acc45)));
  *((half2*)((data0+(alu73+2560)))) = make_half2(((half)(acc34)),((half)(acc35)));
  *((half2*)((data0+(alu73+2568)))) = make_half2(((half)(acc38)),((half)(acc39)));
  *((half2*)((data0+(alu73+2576)))) = make_half2(((half)(acc42)),((half)(acc43)));
  *((half2*)((data0+(alu73+2584)))) = make_half2(((half)(acc46)),((half)(acc47)));
  *((half2*)((data0+(alu73+3072)))) = make_half2(((half)(acc48)),((half)(acc49)));
  *((half2*)((data0+(alu73+3080)))) = make_half2(((half)(acc52)),((half)(acc53)));
  *((half2*)((data0+(alu73+3088)))) = make_half2(((half)(acc56)),((half)(acc57)));
  *((half2*)((data0+(alu73+3096)))) = make_half2(((half)(acc60)),((half)(acc61)));
  *((half2*)((data0+(alu73+3584)))) = make_half2(((half)(acc50)),((half)(acc51)));
  *((half2*)((data0+(alu73+3592)))) = make_half2(((half)(acc54)),((half)(acc55)));
  *((half2*)((data0+(alu73+3600)))) = make_half2(((half)(acc58)),((half)(acc59)));
  *((half2*)((data0+(alu73+3608)))) = make_half2(((half)(acc62)),((half)(acc63)));
}